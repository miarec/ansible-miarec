---
# ------------------------------------------------
# Create SelfSigned Certificate for intra cluster traffic
# ------------------------------------------------
- name: Generate Private TLS infrastructure
  hosts:
    - all

  pre_tasks:
    - name: Define CA Root server and variables
      set_fact:
        openssl_root: "{{ groups.db.0 }}"
        openssl_ca_common_name: miarec-CA
        openssl_ca_key: "{{ openssl_ca_common_name }}.key"
        openssl_base_dir: /etc/openssl
        openssl_ca_dir: "{{ openssl_base_dir }}/ca"
        openssl_servers_dir: "{{ openssl_base_dir }}/servers"

    - set_fact:
        tmp_servers:
          common_name: "{{ hostvars[item].inventory_hostname }}"
          alt_dns: ["{{ hostvars[item].private_ip_address }}"]
      with_items: "{{ groups.db }}"
      register: _tmp_openssl_servers

    - set_fact:
        openssl_servers: "{{ _tmp_openssl_servers.results | selectattr('ansible_facts', 'defined') | map(attribute='ansible_facts.tmp_servers') | list  }}"

  post_tasks:
    - name: Fetch CA certs from root
      command:
        cmd:  cat {{ openssl_ca_dir }}/{{ openssl_ca_common_name }}.pem
      register: _ca_cert
      when: inventory_hostname in openssl_root
      become: true
      changed_when: false

    - name: Fetch server certs for db from root
      command:
        cmd:  cat {{ openssl_servers_dir }}/{{ hostvars[item].inventory_hostname }}/{{ hostvars[item].inventory_hostname }}.crt
      register: _db_cert
      when: inventory_hostname in openssl_root
      become: true
      with_items: "{{ groups.db }}"
      changed_when: false

    - name: Fetch server key for db from root
      command:
        cmd:  cat {{ openssl_servers_dir }}/{{ hostvars[item].inventory_hostname }}/{{ hostvars[item].inventory_hostname }}.key
      register: _db_key
      when: inventory_hostname in openssl_root
      become: true
      with_items: "{{ groups.db }}"
      changed_when: false

  roles:
    - role: 'private-tls'

# ------------------------------------------------
# Place Server certs on DB for Redis
# ------------------------------------------------
- name: Put Server Certs on DB for redis
  hosts:
    - db

  become: true
  vars_files:
    - vars/redis.yml

  tasks:
    - name: Create pki directory
      file:
        dest: "{{ redis_tls_dir }}"
        state: directory
        mode: 0755

    - name: Place CA Cert on DB
      copy:
        content: "{{ _ca_cert.stdout }}"
        dest: "{{ redis_tls_ca_cert }}"

    - name: Place Server Cert on DB
      copy:
        content: "{{ _db_cert.results.0.stdout }}"
        dest: "{{ redis_tls_cert }}"

    - name: Place Server Key on DB
      copy:
        content: "{{ _db_key.results.0.stdout }}"
        dest: "{{ redis_tls_key }}"




