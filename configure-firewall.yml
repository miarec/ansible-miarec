# ------------------------------------------------
# Database
# Firewall configuration for Database server
# Here we allow inbound connections from recorder and web servers
# ------------------------------------------------
- name: Configure firewall on database host
  hosts: db
  become: yes
  vars_files:
    - vars/firewall.yml
  pre_tasks:
    - set_fact:
        tmp_rule:
          name: "open_postgresql_port_{{ hostvars[item].inventory_hostname.replace('.', '_') }}"
          rules: "-A INPUT -p tcp --dport {{ miarec_db_port }} -s {{ hostvars[item].private_ip_address }} -j ACCEPT"
          state: present
      with_items: "{{ groups.recorder + groups.screen + groups.web + groups.celery + groups.celerybeat }}"
      when: hostvars[item].private_ip_address != hostvars[inventory_hostname].private_ip_address
      register: tmp_iptables_rules

    - set_fact:
        iptables_keep_unmanaged: yes
        iptables_custom_rules: "{{ tmp_iptables_rules.results | selectattr('ansible_facts', 'defined') | map(attribute='ansible_facts.tmp_rule') | list }}"
  roles:
    - iptables
  tags: 'postgresql'

# ------------------------------------------------
# Redis
# Firewall configuration for Redis server
# Here we allow inbound connections from recorder and web servers
# ------------------------------------------------
- name: Configure firewall on Redis host
  hosts: redis
  vars_files:
    - vars/firewall.yml
    - vars/redis.yml
  become: yes
  pre_tasks:
    - set_fact:
        tmp_rule:
          - name: "open_redis_port_{{ hostvars[item].inventory_hostname.replace('.', '_') }}"
            rules: "-A INPUT -p tcp --dport {{ redis_port }} -s {{ hostvars[item].private_ip_address }} -j ACCEPT"
            state: present
      with_items: "{{ groups.recorder + groups.screen + groups.web + groups.celery + groups.celerybeat }}"
      when: hostvars[item].private_ip_address != hostvars[inventory_hostname].private_ip_address
      register: tmp_iptables_rules

    - set_fact:
        iptables_keep_unmanaged: yes
        iptables_custom_rules: "{{ tmp_iptables_rules.results | selectattr('ansible_facts', 'defined') | map(attribute='ansible_facts.tmp_rule') | list }}"
  roles:
    - iptables
  tags: 'redis'


# ------------------------------------------------
# Web server
# Firewall configuration for Web server
# Here we allow inbound connections to port 80 and 443
# ------------------------------------------------
- name: Configure firewall on Web hosts
  hosts: web
  become: yes
  vars_files:
    - vars/firewall.yml
  pre_tasks:
    - set_fact:
        iptables_keep_unmanaged: yes
        iptables_custom_rules:
          - name: open_web_http_port
            rules: "-A INPUT -p tcp --dport 80 -j ACCEPT"
            state: present
          - name: open_web_https_port
            rules: "-A INPUT -p tcp --dport 443 -j ACCEPT"
            state: present
          - name: open_prometheus
            rules: "-A INPUT -p tcp --dport 9090 -j ACCEPT"
            state: present
          - name: open_grafana
            rules: "-A INPUT -p tcp --dport 3000 -j ACCEPT"
            state: present
          - name: open_node_exporter
            rules: "-A INPUT -p tcp --dport 9100 -j ACCEPT"
            state: present
  roles:
    - iptables
  tags: 'apache'


# ------------------------------------------------
# Recorder servers
# Firewall configuration for Recorder server (SIPREC, CiscoBiB, REST API, etc)
# ------------------------------------------------
- name: Configure firewall on Recorder host
  hosts: recorder
  become: yes
  vars_files:
    - vars/firewall.yml
  pre_tasks:
    - set_fact:
        iptables_keep_unmanaged: yes
        iptables_custom_rules:
          - name: open_rest_api
            rules: '-A INPUT -p tcp --dport {{ miarec_rest_api_port }} -j ACCEPT'
            state: '{{ (miarec_rest_api_port != 0 ) | ternary("present", "absent") }}'
            # state: absent

          - name: open_live_monitoring_signaling
            rules: '-A INPUT -p tcp --dport {{ miarec_live_monitoring_signaling_port }} -j ACCEPT'
            state: '{{ (miarec_live_monitoring_signaling_port != 0 ) | ternary("present", "absent") }}'

          - name: open_live_monitoring_rtp
            rules: '-A INPUT -p udp --dport {{ miarec_live_monitoring_rtp_port_begin }}:{{ miarec_live_monitoring_rtp_port_end }} -j ACCEPT'
            state: '{{ (miarec_live_monitoring_rtp_port_begin != 0 ) | ternary("present", "absent") }}'

          - name: open_siprec_signaling_tcp
            rules: '-A INPUT -p tcp --dport {{ miarec_siprec_signaling_port }} -j ACCEPT'
            state: '{{ (miarec_siprec_signaling_port != 0 ) | ternary("present", "absent") }}'

          - name: open_siprec_signaling_udp
            rules: '-A INPUT -p udp --dport {{ miarec_siprec_signaling_port }} -j ACCEPT'
            state: '{{ (miarec_siprec_signaling_port != 0 ) | ternary("present", "absent") }}'

          - name: open_siprec_rtp
            rules: '-A INPUT -p udp --dport {{ miarec_siprec_rtp_port_begin }}:{{ miarec_siprec_rtp_port_end }} -j ACCEPT'
            state: '{{ (miarec_siprec_rtp_port_begin != 0 ) | ternary("present", "absent") }}'
            
          - name: open_ciscobib_signaling_tcp
            rules: '-A INPUT -p tcp --dport {{ miarec_ciscobib_signaling_port }} -j ACCEPT'
            state: '{{ (miarec_ciscobib_signaling_port != 0 ) | ternary("present", "absent") }}'

          - name: open_ciscobib_signaling_udp
            rules: '-A INPUT -p udp --dport {{ miarec_ciscobib_signaling_port }} -j ACCEPT'
            state: '{{ (miarec_ciscobib_signaling_port != 0 ) | ternary("present", "absent") }}'

          - name: open_ciscobib_rtp
            rules: '-A INPUT -p udp --dport {{ miarec_ciscobib_rtp_port_begin }}:{{ miarec_ciscobib_rtp_port_end }} -j ACCEPT'
            state: '{{ (miarec_ciscobib_rtp_port_begin != 0 ) | ternary("present", "absent") }}'
  roles:
    - iptables
  tags: 'miarec'


# ------------------------------------------------
# Screen Recorder servers
# Firewall configuration for Recorder server (REST API, client connections, etc.)
# ------------------------------------------------
- name: Configure firewall on Screen Recorder host
  hosts: screen
  become: yes
  vars_files:
    - vars/firewall.yml
  pre_tasks:
    - set_fact:
        iptables_keep_unmanaged: yes
        iptables_custom_rules:

          - name: open_screen_rest_api
            rules: '-A INPUT -p tcp --dport {{ miarec_screen_rest_api_port }} -j ACCEPT'
            state: '{{ (miarec_screen_rest_api_port != 0 ) | ternary("present", "absent") }}'

          - name: open_screen_client_tcp
            rules: '-A INPUT -p tcp --dport {{ miarec_screen_client_tcp_port }} -j ACCEPT'
            state: '{{ (miarec_screen_client_tcp_port != 0 ) | ternary("present", "absent") }}'
            
          - name: open_screen_client_tls
            rules: '-A INPUT -p tcp --dport {{ miarec_screen_client_tls_port }} -j ACCEPT'
            state: '{{ (miarec_screen_client_tls_port != 0 ) | ternary("present", "absent") }}'
  roles:
    - iptables
  tags: 'miarec-screen'
